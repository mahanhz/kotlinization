buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
		propDepsVersion = '0.0.8'
	}
	repositories {
		mavenCentral()

		maven {
			url 'https://plugins.gradle.org/m2/'
		}
		maven {
			url 'http://repo.spring.io/plugins-release'
		}
	}
	dependencies {
		classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath ("io.spring.gradle:propdeps-plugin:${propDepsVersion}")
	}
}

plugins {
	id "io.spring.dependency-management" version "1.0.2.RELEASE"
	id 'net.saliman.cobertura' version '2.4.0'
	id 'com.github.kt3k.coveralls' version '2.8.1'
	id "org.sonarqube" version "2.2"
}

apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

configure(allprojects) {
	apply plugin: 'java'

	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
	apply plugin: 'propdeps-eclipse'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		mavenCentral()
	}
}

def frameworkAgnostic = [':application:core', ':application:adapter']
configure(subprojects - frameworkAgnostic.collect { project(it) }) {
	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
		}
	}
}

configure([project(':application')]) {
	apply plugin: 'org.springframework.boot'
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.5'
}

ext {
	versions = [
		commonsLang: '3.5',
		guava: '21.0',
		jackson: '2.8.8',
		jug: '3.1.4',
		immutables: '2.4.6',
		nullableJsr305: '3.0.2',
		springfoxSwagger2: '2.7.0'
	]
	test_versions = [
		assertJ: '3.6.2',
		equalsVerifier: '2.2.2',
		jsonSchema: '1.0.21',
		jsonSchemaValidator: '2.2.6',
		junit: '4.12',
		junitParams: '1.1.0',
		mockito: '2.7.22',
	]
}

ext.app_tests = [
		integration_test: [
				"com.kjetland:mbknor-jackson-jsonschema_2.12:${test_versions.jsonSchema}",
				"com.github.fge:json-schema-validator:${test_versions.jsonSchemaValidator}"
		],
		spring_test: [
				"org.springframework.boot:spring-boot-starter-test",
		],
		unit_test: [
				"junit:junit:${test_versions.junit}",
				"nl.jqno.equalsverifier:equalsverifier:${test_versions.equalsVerifier}",
				"org.assertj:assertj-core:${test_versions.assertJ}",
				"org.mockito:mockito-core:${test_versions.mockito}",
				"pl.pragmatists:JUnitParams:${test_versions.junitParams}"
		]
]

apply from: 'gradle/application.gradle'
